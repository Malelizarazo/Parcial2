{
	"info": {
		"_postman_id": "7c0f14f1-886b-4994-b744-0c35d0c1341c",
		"name": "Parcial Web",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43883281",
		"_collection_link": "https://maria-2131421.postman.co/workspace/Maria's-Workspace~85b44b0c-a57e-4d11-888d-4eead162c6c8/collection/43883281-7c0f14f1-886b-4994-b744-0c35d0c1341c?action=share&source=collection_link&creator=43883281"
	},
	"item": [
		{
			"name": "Crear estudiante",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 201 o 200 - Estudiante creado correctamente\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"pm.test(\"El cuerpo de respuesta contiene el ID generado\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.id).to.be.a(\"number\");\r",
							"});\r",
							"\r",
							"pm.test(\"La respuesta contiene el nombre esperado\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.nombre).to.eql(\"Juan Ramon\");\r",
							"});\r",
							"// Test to check if the status code is 201 or 200 with a reason\r",
							"pm.test(\"Status 201 o 200 - Estudiante creado correctamente\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201], \"Se espera que el estudiante se cree con éxito con un status code de 200 o 201\");\r",
							"});\r",
							"\r",
							"// Test to check if the response body contains the generated ID with a reason\r",
							"pm.test(\"El cuerpo de respuesta contiene el ID generado\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.id).to.be.a(\"number\", \"El ID generado debe ser de tipo número\");\r",
							"});\r",
							"\r",
							"// Test to check if the response contains the expected name with a reason\r",
							"pm.test(\"La respuesta contiene el nombre esperado\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.nombre).to.eql(\"Juan Ramon\", \"El nombre del estudiante en la respuesta debe ser 'Juan Ramon'\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"cedula\": 1007530010,  \r\n  \"nombre\": \"Juan Ramon\",\r\n  \"correo\": \"juan.ramo@example.com\",\r\n  \"programa\": \"Ingenieria Biomedica\",\r\n  \"semestre\": 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/estudiantes",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"estudiantes"
					]
				},
				"description": "### Endpoint Description\n\nThis endpoint allows the creation of a new student record.\n\n### Request Body\n\n- cedula (number): The identification number of the student.\n    \n- nombre (string): The name of the student.\n    \n- correo (string): The email address of the student.\n    \n- programa (string): The academic program in which the student is enrolled.\n    \n- semestre (number): The semester in which the student is currently enrolled.\n    \n\n### Response\n\nThe response is in JSON format and includes the following fields:\n\n- id (number): The unique identifier for the student record.\n    \n- cedula (number): The identification number of the student.\n    \n- nombre (string): The name of the student.\n    \n- correo (string): The email address of the student.\n    \n- programa (string): The academic program in which the student is enrolled.\n    \n- semestre (number): The semester in which the student is currently enrolled.\n    \n\n### JSON Schema for Response\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": { \"type\": \"number\" },\n    \"cedula\": { \"type\": \"number\" },\n    \"nombre\": { \"type\": \"string\" },\n    \"correo\": { \"type\": \"string\" },\n    \"programa\": { \"type\": \"string\" },\n    \"semestre\": { \"type\": \"number\" }\n  }\n}\n\n ```"
			},
			"response": [
				{
					"name": "Crear estudiante",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"cedula\": 1007530011,  \r\n  \"nombre\": \"Juan Ramon\",\r\n  \"correo\": \"juan.ramo@example.com\",\r\n  \"programa\": \"Ingenieria Biomedica\",\r\n  \"semestre\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3001/estudiantes",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"estudiantes"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "131"
						},
						{
							"key": "ETag",
							"value": "W/\"83-OjU3dXGiwHk5miFwSkPlEfEgu9I\""
						},
						{
							"key": "Date",
							"value": "Sun, 18 May 2025 15:45:32 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 4,\n    \"cedula\": 1007530011,\n    \"nombre\": \"Juan Ramon\",\n    \"correo\": \"juan.ramo@example.com\",\n    \"programa\": \"Ingenieria Biomedica\",\n    \"semestre\": 10\n}"
				}
			]
		},
		{
			"name": "Crear actividad",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status 201 o 200 - Actividad creada correctamente\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"// Test to check if the response status code is 200 or 201 with reason\r",
							"pm.test(\"Status 201 o 200 - Actividad creada correctamente\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201], \"La actividad se creó con éxito\");\r",
							"});\r",
							"\r",
							"// Test to check if the returned title matches with reason\r",
							"pm.test(\"El título devuelto coincide\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.titulo.toLowerCase()).to.include(\"solo hoy\", \"El título coincide con la búsqueda 'solo hoy'\");\r",
							"});\r",
							"\r",
							"// Test to check if the maximum capacity is 2 with reason\r",
							"pm.test(\"El cupo máximo debe ser 2\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.cupoMaximo).to.eql(2, \"El cupo máximo es 2\");\r",
							"});\r",
							"// Test to verify that the estado property is equal to 0\r",
							"pm.test(\"Estado debe ser 0\", function () {\r",
							"  const json = pm.response.json();\r",
							"  pm.expect(json.estado).to.eql(0, \"El estado debe ser 0\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"titulo\": \"solo hoy y no mas3\",  \r\n  \"fecha\": \"2025-02-02\",\r\n  \"cupoMaximo\": 2\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/actividades",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"actividades"
					]
				},
				"description": "# Add Activity\n\nThis endpoint allows the user to add a new activity.\n\n## Request\n\n- Method: POST\n    \n- URL: `http://localhost:3001/actividades`\n    \n\n### Request Body\n\n- Type: JSON\n    \n    - `titulo`: (string) The title of the activity.\n        \n    - `fecha`: (string) The date of the activity.\n        \n    - `cupoMaximo`: (number) The maximum capacity for the activity.\n        \n\n## Response\n\n- Status: 201\n    \n- Content-Type: application/json\n    \n\n### Response Body\n\n``` json\n{\n    \"id\": 0,\n    \"titulo\": \"\",\n    \"fecha\": \"\",\n    \"cupoMaximo\": 0,\n    \"estado\": 0\n}\n\n ```\n\nThe response will contain the details of the newly added activity, including the ID, title, date, maximum capacity, and state.\n\n#### Example\n\n``` json\n{\n    \"id\": 0,\n    \"titulo\": \"\",\n    \"fecha\": \"\",\n    \"cupoMaximo\": 0,\n    \"estado\": 0\n}\n\n ```\n\nThis endpoint is used to add a new activity.\n\n#### Request Body\n\n- **titulo** (string, required): The title of the activity.\n    \n- **fecha** (string, required): The date of the activity.\n    \n- **cupoMaximo** (number, required): The maximum capacity for the activity.\n    \n\nExample:\n\n``` json\n{\n  \"titulo\": \"solo hoy y no mas3\",\n  \"fecha\": \"2025-02-02\",\n  \"cupoMaximo\": 2\n}\n\n ```\n\n#### Response\n\n- **id** (number): The ID of the newly created activity.\n    \n- **titulo** (string): The title of the activity.\n    \n- **fecha** (string): The date of the activity.\n    \n- **cupoMaximo** (number): The maximum capacity for the activity.\n    \n- **estado** (number): The state of the activity.\n    \n\nExample:\n\n``` json\n{\n  \"id\": 0,\n  \"titulo\": \"\",\n  \"fecha\": \"\",\n  \"cupoMaximo\": 0,\n  \"estado\": 0\n}\n\n ```"
			},
			"response": [
				{
					"name": "Crear estudiante Copy",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"titulo\": \"solo hoy y no mas\",  \r\n  \"fecha\": \"2025-02-02\",\r\n  \"cupoMaximo\": 2\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3001/actividades",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"actividades"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "84"
						},
						{
							"key": "ETag",
							"value": "W/\"54-4S7F5LVO65f/i3J5zMoLuw2wDbs\""
						},
						{
							"key": "Date",
							"value": "Sun, 18 May 2025 15:46:05 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 2,\n    \"titulo\": \"solo hoy y no mas\",\n    \"fecha\": \"2025-02-02\",\n    \"cupoMaximo\": 2,\n    \"estado\": 0\n}"
				}
			]
		},
		{
			"name": "Encontrar estudiante por id",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"cedula\": 1007530018,  \r\n  \"nombre\": \"Juan Pérez\",\r\n  \"correo\": \"juan.perez@example.com\",\r\n  \"programa\": \"Ingenieria Quimica\",\r\n  \"semestre\": 10\r\n}"
				},
				"url": {
					"raw": "http://localhost:3001/estudiantes/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"estudiantes",
						"1"
					]
				}
			},
			"response": [
				{
					"name": "Encontrar estudiante por id",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"cedula\": 1007530018,  \r\n  \"nombre\": \"Juan Pérez\",\r\n  \"correo\": \"juan.perez@example.com\",\r\n  \"programa\": \"Ingenieria Quimica\",\r\n  \"semestre\": 10\r\n}"
						},
						"url": {
							"raw": "http://localhost:3001/estudiantes/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"estudiantes",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "160"
						},
						{
							"key": "ETag",
							"value": "W/\"a0-gcYJa0c9ylxyThTUrGM8dsElEkA\""
						},
						{
							"key": "Date",
							"value": "Sun, 18 May 2025 15:28:35 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 1,\n    \"cedula\": 1007530018,\n    \"nombre\": \"Juan Pérez\",\n    \"correo\": \"juan.perez@example.com\",\n    \"programa\": \"Ingenieria Quimica\",\n    \"semestre\": 5,\n    \"actividades\": [],\n    \"resenas\": []\n}"
				}
			]
		},
		{
			"name": "agregar estudiante a actividad",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check if the response status code is 200 or 201\r",
							"pm.test(\"Status 201 o 200 - Inscripción exitosa\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"// Check if the message contains the word 'inscripción'\r",
							"pm.test(\"El mensaje contiene la palabra 'inscripción'\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.mensaje.toLowerCase()).to.include(\"inscripción\");\r",
							"});\r",
							"\r",
							"// Check if the response contains either 'mensaje', 'estudiante', or 'actividad'\r",
							"pm.test(\"Debe devolver el estudiante inscrito o un resumen\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.have.any.keys('mensaje', 'estudiante', 'actividad');\r",
							"});\r",
							"\r",
							"\r",
							"// Check if the 'mensaje' is a non-empty string\r",
							"pm.test(\"Mensaje is a non-empty string\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.mensaje).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Mensaje should not be empty\");\r",
							"});\r",
							"\r",
							"// Check if the Content-Type header is application/json\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3001/estudiantes/4/inscribirse/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"estudiantes",
						"4",
						"inscribirse",
						"1"
					]
				},
				"description": "### Add Student Enrollment\n\nThis endpoint allows the enrollment of a student with ID 4 into course ID 1.\n\n#### Request Body\n\n- No request body parameters required.\n    \n\n#### Response\n\n- Status: 201\n    \n- Content-Type: application/json\n    \n- { \"mensaje\": \"\"}  \n    The response contains a message indicating the success of the enrollment process."
			},
			"response": [
				{
					"name": "New Request",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3001/estudiantes/3/inscribirse/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"estudiantes",
								"3",
								"inscribirse",
								"1"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "34"
						},
						{
							"key": "ETag",
							"value": "W/\"22-eacQQvP9cY7SfUCsU0Nad2pZslI\""
						},
						{
							"key": "Date",
							"value": "Sun, 18 May 2025 15:52:48 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"mensaje\": \"Inscripción exitosa\"\n}"
				},
				{
					"name": "New Request",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3001/estudiantes/4/inscribirse/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"estudiantes",
								"4",
								"inscribirse",
								"1"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "34"
						},
						{
							"key": "ETag",
							"value": "W/\"22-eacQQvP9cY7SfUCsU0Nad2pZslI\""
						},
						{
							"key": "Date",
							"value": "Sun, 18 May 2025 16:24:26 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"mensaje\": \"Inscripción exitosa\"\n}"
				}
			]
		},
		{
			"name": "cambiar estado actividad",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Verificamos que el cambio de estado se haga correctamente.\r",
							"// Esta prueba es fundamental porque solo se permite cambiar el estado\r",
							"// si se cumplen ciertas condiciones (por ejemplo, sin cupo disponible).\r",
							"\r",
							"//  1. Verificamos que la respuesta tenga código 200 (o 204 en algunos casos)\r",
							"pm.test(\"Debe responder con status 200 indicando éxito\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"// 2. Confirmamos que el campo 'estado' haya sido actualizado a 2 (Finalizada)\r",
							"pm.test(\"El campo 'estado' debe ser igual a 2 (Finalizada)\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.estado).to.eql(2);\r",
							"});\r",
							"\r",
							"//  3. Validamos que el ID de la actividad corresponda a la que actualizamos\r",
							"pm.test(\"El ID devuelto debe coincidir con el de la actividad actualizada\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.id).to.eql(2);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"estado\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/actividades/2/estado",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"actividades",
						"2",
						"estado"
					]
				},
				"description": "### Update Activity Status\n\nThis endpoint is used to update the status of a specific activity.\n\n#### Request\n\n- Method: PATCH\n    \n- URL: `http://localhost:3001/actividades/2/estado`\n    \n- { \"estado\": 2}\n    \n\n#### Response\n\nThe response for this request can be documented as a JSON schema:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"integer\"\n    },\n    \"titulo\": {\n      \"type\": \"string\"\n    },\n    \"fecha\": {\n      \"type\": \"string\"\n    },\n    \"cupoMaximo\": {\n      \"type\": \"integer\"\n    },\n    \"estado\": {\n      \"type\": \"integer\"\n    },\n    \"estudiantes\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\"\n          },\n          \"cedula\": {\n            \"type\": \"integer\"\n          },\n          \"nombre\": {\n            \"type\": \"string\"\n          },\n          \"correo\": {\n            \"type\": \"string\"\n          },\n          \"programa\": {\n            \"type\": \"string\"\n          },\n          \"semestre\": {\n            \"type\": \"integer\"\n          }\n        }\n      }\n    }\n  }\n}\n\n ```"
			},
			"response": [
				{
					"name": "Crear actividad Copy",
					"originalRequest": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"estado\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3001/actividades/2/estado",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"actividades",
								"2",
								"estado"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "364"
						},
						{
							"key": "ETag",
							"value": "W/\"16c-oWrk1VrzTrUz/2lhGnvTtx/ddrY\""
						},
						{
							"key": "Date",
							"value": "Sun, 18 May 2025 15:46:36 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 2,\n    \"titulo\": \"solo hoy y no mas\",\n    \"fecha\": \"2025-02-02\",\n    \"cupoMaximo\": 2,\n    \"estado\": 2,\n    \"estudiantes\": [\n        {\n            \"id\": 1,\n            \"cedula\": 1007530018,\n            \"nombre\": \"Juan Pérez\",\n            \"correo\": \"juan.perez@example.com\",\n            \"programa\": \"Ingenieria Quimica\",\n            \"semestre\": 10\n        },\n        {\n            \"id\": 2,\n            \"cedula\": 1007530012,\n            \"nombre\": \"Juan Ramon\",\n            \"correo\": \"juan.ramo@example.com\",\n            \"programa\": \"Ingenieria Biomedica\",\n            \"semestre\": 10\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "actividades fecha",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//  Esta prueba verifica que el sistema devuelva correctamente todas las actividades\r",
							"// registradas para la fecha específica '2025-02-02'. Es esencial para la búsqueda por fecha.\r",
							"\r",
							"//  1. Código de respuesta exitoso\r",
							"pm.test(\"Debe responder con status 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"//  2. Se devuelve un arreglo\r",
							"pm.test(\"La respuesta debe ser un arreglo\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"//  3. Si hay resultados, cada uno debe tener la fecha correcta\r",
							"pm.test(\"Cada actividad (si hay) debe tener la fecha '2025-02-02'\", function () {\r",
							"    const json = pm.response.json();\r",
							"    json.forEach(actividad => {\r",
							"        pm.expect(actividad.fecha).to.eql(\"2025-02-02\");\r",
							"    });\r",
							"});\r",
							"\r",
							"//  4. Cada objeto debe tener propiedades esenciales: id, titulo, cupoMaximo, estado\r",
							"pm.test(\"Cada actividad debe tener id, titulo, cupoMaximo y estado\", function () {\r",
							"    const json = pm.response.json();\r",
							"    json.forEach(actividad => {\r",
							"        pm.expect(actividad).to.have.all.keys(\"id\", \"titulo\", \"fecha\", \"cupoMaximo\", \"estado\");\r",
							"    });\r",
							"});\r",
							"\r",
							"// 5. Validar que no haya resultados repetidos (mismo ID más de una vez)\r",
							"pm.test(\"Las actividades deben tener IDs únicos\", function () {\r",
							"    const json = pm.response.json();\r",
							"    const ids = json.map(a => a.id);\r",
							"    const set = new Set(ids);\r",
							"    pm.expect(set.size).to.eql(ids.length);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://localhost:3001/actividades/fecha/2025-02-02",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"actividades",
						"fecha",
						"2025-02-02"
					]
				},
				"description": "### GET /actividades/fecha/2025-02-02\n\nThis endpoint retrieves a list of activities scheduled for the specified date.\n\n#### Request\n\nNo request body is required for this endpoint.\n\n- URL Parameters\n    \n    - **fecha** (string, required): The date for which activities are to be retrieved. Format: YYYY-MM-DD.\n        \n\n#### Response\n\nThe response will be a JSON array containing objects with the following properties:\n\n- **id** (number): The unique identifier for the activity.\n    \n- **titulo** (string): The title of the activity.\n    \n- **fecha** (string): The date of the activity.\n    \n- **cupoMaximo** (number): The maximum capacity of participants for the activity.\n    \n- **estado** (number): The status of the activity.\n    \n\n#### Example Response\n\n``` json\n[\n    {\n        \"id\": 0,\n        \"titulo\": \"\",\n        \"fecha\": \"\",\n        \"cupoMaximo\": 0,\n        \"estado\": 0\n    }\n]\n\n ```"
			},
			"response": [
				{
					"name": "New Request",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:3001/actividades/fecha/2025-02-02",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"actividades",
								"fecha",
								"2025-02-02"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "179"
						},
						{
							"key": "ETag",
							"value": "W/\"b3-hgW2HfUo/Z/UT5TMPpYJtjH8lyw\""
						},
						{
							"key": "Date",
							"value": "Sun, 18 May 2025 15:47:57 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"id\": 1,\n        \"titulo\": \"Hola como estas me llamo\",\n        \"fecha\": \"2025-02-02\",\n        \"cupoMaximo\": 10,\n        \"estado\": 0\n    },\n    {\n        \"id\": 2,\n        \"titulo\": \"solo hoy y no mas\",\n        \"fecha\": \"2025-02-02\",\n        \"cupoMaximo\": 2,\n        \"estado\": 2\n    }\n]"
				}
			]
		},
		{
			"name": "Resena",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Esta prueba verifica la creación exitosa de una reseña\r",
							"// solo si la actividad está finalizada y el estudiante estuvo inscrito.\r",
							"\r",
							"// 1. Debe devolver un código 201 o 200\r",
							"pm.test(\"Reseña creada con status 201 o 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
							"});\r",
							"\r",
							"// 2. Confirmar que se devuelve el comentario ingresado\r",
							"pm.test(\"El comentario devuelto debe coincidir\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.comentario.toLowerCase()).to.include(\"chevere\");\r",
							"});\r",
							"\r",
							"// 3. Verificar que la calificación sea la enviada (10)\r",
							"pm.test(\"La calificación debe ser 10\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.calificacion).to.eql(10);\r",
							"});\r",
							"\r",
							"// 4. Validar que el objeto incluye relaciones correctas\r",
							"pm.test(\"Debe incluir campos de estudiante y actividad\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.have.property(\"estudiante\");\r",
							"    pm.expect(json).to.have.property(\"actividad\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"comentario\": \"muy chevere\",  \r\n  \"calificacion\": 10,\r\n  \"fecha\": \"2025-02-02\",\r\n  \"estudianteId\": 2,\r\n  \"actividadId\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/resenas/2/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"resenas",
						"2",
						"2"
					]
				},
				"description": "### Add Resena\n\nThis endpoint allows the user to add a review for a specific activity.\n\n#### Request Body\n\n- comentario (text, required): The comment provided by the user.\n    \n- calificacion (number, required): The rating given by the user.\n    \n- fecha (text, required): The date of the review.\n    \n- estudianteId (number, required): The ID of the student submitting the review.\n    \n- actividadId (number, required): The ID of the activity being reviewed.\n    \n\n#### Response\n\nUpon successful creation, the server responds with a status code of 201 and a JSON object containing the newly created review's details, including the ID, comment, rating, date, and details of the student and the activity involved.\n\nExample Response:\n\n``` json\n{\n    \"id\": 0,\n    \"comentario\": \"\",\n    \"calificacion\": 0,\n    \"fecha\": \"\",\n    \"estudiante\": {\n        \"id\": 0,\n        \"cedula\": 0,\n        \"nombre\": \"\",\n        \"correo\": \"\",\n        \"programa\": \"\",\n        \"semestre\": 0,\n        \"actividades\": [\n            {\n                \"id\": 0,\n                \"titulo\": \"\",\n                \"fecha\": \"\",\n                \"cupoMaximo\": 0,\n                \"estado\": 0\n            }\n        ]\n    },\n    \"actividad\": {\n        \"id\": 0,\n        \"titulo\": \"\",\n        \"fecha\": \"\",\n        \"cupoMaximo\": 0,\n        \"estado\": 0\n    }\n}\n\n ```"
			},
			"response": [
				{
					"name": "Crear estudiante Copy",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"comentario\": \"muy chevere\",  \r\n  \"calificacion\": 10,\r\n  \"fecha\": \"2025-02-02\",\r\n  \"estudianteId\": 2,\r\n  \"actividadId\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3001/resenas/2/2",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"resenas",
								"2",
								"2"
							]
						}
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "417"
						},
						{
							"key": "ETag",
							"value": "W/\"1a1-z935ctimLB3dCa6O/+7m6otN67U\""
						},
						{
							"key": "Date",
							"value": "Sun, 18 May 2025 16:38:09 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 2,\n    \"comentario\": \"muy chevere\",\n    \"calificacion\": 10,\n    \"fecha\": \"2025-02-02\",\n    \"estudiante\": {\n        \"id\": 2,\n        \"cedula\": 1007530012,\n        \"nombre\": \"Juan Ramon\",\n        \"correo\": \"juan.ramo@example.com\",\n        \"programa\": \"Ingenieria Biomedica\",\n        \"semestre\": 10,\n        \"actividades\": [\n            {\n                \"id\": 2,\n                \"titulo\": \"solo hoy y no mas\",\n                \"fecha\": \"2025-02-02\",\n                \"cupoMaximo\": 2,\n                \"estado\": 2\n            }\n        ]\n    },\n    \"actividad\": {\n        \"id\": 2,\n        \"titulo\": \"solo hoy y no mas\",\n        \"fecha\": \"2025-02-02\",\n        \"cupoMaximo\": 2,\n        \"estado\": 2\n    }\n}"
				}
			]
		},
		{
			"name": "Resena by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 🧪 Este test verifica que se pueda consultar una reseña existente por su ID.\r",
							"\r",
							"// ✅ 1. Validar que el status sea 200\r",
							"pm.test(\"Status 200 - Consulta exitosa\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"// ✅ 2. Validar que se devuelve el objeto con ID correcto\r",
							"pm.test(\"La reseña debe tener el ID esperado\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.id).to.eql(1);\r",
							"});\r",
							"\r",
							"// ✅ 3. El objeto debe incluir comentario, calificación y fecha\r",
							"pm.test(\"La reseña contiene los campos requeridos\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json).to.have.all.keys(\"id\", \"comentario\", \"calificacion\", \"fecha\", \"estudiante\", \"actividad\");\r",
							"});\r",
							"\r",
							"// ✅ 4. Verificar que estudiante y actividad asociados existan\r",
							"pm.test(\"La reseña tiene relaciones completas\", function () {\r",
							"    const json = pm.response.json();\r",
							"    pm.expect(json.estudiante).to.be.an(\"object\");\r",
							"    pm.expect(json.actividad).to.be.an(\"object\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"comentario\": \"muy chevere\",  \r\n  \"calificacion\": 10,\r\n  \"fecha\": \"2025-02-02\",\r\n  \"estudianteId\": 2,\r\n  \"actividadId\": 2\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3001/resenas/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3001",
					"path": [
						"resenas",
						"1"
					]
				},
				"description": "# Get Resena by ID\n\nThis endpoint retrieves a specific review by its ID.\n\n## Request\n\n- Method: `GET`\n    \n- Endpoint: `http://localhost:3001/resenas/1`\n    \n\n### Request Body\n\n- The request does not contain a request body.\n    \n\n## Response\n\n- Status: 200\n    \n- Content-Type: application/json\n    \n\n### Response Body\n\n- `id` (number) - The ID of the review.\n    \n- `comentario` (string) - The comment for the review.\n    \n- `calificacion` (number) - The rating for the review.\n    \n- `fecha` (string) - The date of the review.\n    \n- `estudiante` (object) - Information about the student who made the review.\n    \n    - `id` (number) - The ID of the student.\n        \n    - `cedula` (number) - The student's identification number.\n        \n    - `nombre` (string) - The student's name.\n        \n    - `correo` (string) - The student's email.\n        \n    - `programa` (string) - The student's program.\n        \n    - `semestre` (number) - The student's semester.\n        \n- `actividad` (object) - Information about the activity being reviewed.\n    \n    - `id` (number) - The ID of the activity.\n        \n    - `titulo` (string) - The title of the activity.\n        \n    - `fecha` (string) - The date of the activity.\n        \n    - `cupoMaximo` (number) - The maximum capacity of the activity.\n        \n    - `estado` (number) - The status of the activity.\n        \n\n### Example Response\n\n``` json\n{\n  \"id\": 0,\n  \"comentario\": \"\",\n  \"calificacion\": 0,\n  \"fecha\": \"\",\n  \"estudiante\": {\n    \"id\": 0,\n    \"cedula\": 0,\n    \"nombre\": \"\",\n    \"correo\": \"\",\n    \"programa\": \"\",\n    \"semestre\": 0\n  },\n  \"actividad\": {\n    \"id\": 0,\n    \"titulo\": \"\",\n    \"fecha\": \"\",\n    \"cupoMaximo\": 0,\n    \"estado\": 0\n  }\n}\n\n ```"
			},
			"response": [
				{
					"name": "Resena Copy",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"comentario\": \"muy chevere\",  \r\n  \"calificacion\": 10,\r\n  \"fecha\": \"2025-02-02\",\r\n  \"estudianteId\": 2,\r\n  \"actividadId\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3001/resenas/1",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3001",
							"path": [
								"resenas",
								"1"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "X-Powered-By",
							"value": "Express"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Content-Length",
							"value": "316"
						},
						{
							"key": "ETag",
							"value": "W/\"13c-I2FBI0nUilBLfqmAH7urIiKoVfQ\""
						},
						{
							"key": "Date",
							"value": "Sun, 18 May 2025 16:17:26 GMT"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Keep-Alive",
							"value": "timeout=5"
						}
					],
					"cookie": [],
					"body": "{\n    \"id\": 1,\n    \"comentario\": \"muy chevere\",\n    \"calificacion\": 10,\n    \"fecha\": \"2025-02-02\",\n    \"estudiante\": {\n        \"id\": 2,\n        \"cedula\": 1007530012,\n        \"nombre\": \"Juan Ramon\",\n        \"correo\": \"juan.ramo@example.com\",\n        \"programa\": \"Ingenieria Biomedica\",\n        \"semestre\": 10\n    },\n    \"actividad\": {\n        \"id\": 2,\n        \"titulo\": \"solo hoy y no mas\",\n        \"fecha\": \"2025-02-02\",\n        \"cupoMaximo\": 2,\n        \"estado\": 2\n    }\n}"
				}
			]
		}
	]
}